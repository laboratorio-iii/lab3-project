{"remainingRequest":"/home/hermesgabriel/workspace/lab3-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/hermesgabriel/workspace/lab3-project/src/components/Search.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/hermesgabriel/workspace/lab3-project/src/components/Search.vue","mtime":1574614563002},{"path":"/home/hermesgabriel/workspace/lab3-project/node_modules/cache-loader/dist/cjs.js","mtime":1573791216187},{"path":"/home/hermesgabriel/workspace/lab3-project/node_modules/babel-loader/lib/index.js","mtime":1573791216119},{"path":"/home/hermesgabriel/workspace/lab3-project/node_modules/cache-loader/dist/cjs.js","mtime":1573791216187},{"path":"/home/hermesgabriel/workspace/lab3-project/node_modules/vue-loader/lib/index.js","mtime":1573791221627}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex'\nimport UserService from '@/services/UserService'\nimport PostService from '@/services/PostService'\nimport LikeService from '@/services/LikeService'\nimport CommentService from '@/services/CommentService'\nimport FollowService from '@/services/FollowService'\nimport CityService from '@/services/CityService'\nimport CategoryService from '@/services/CategoryService'\n\nexport default {\n    data: () => ({\n        tab: null,\n        items: [\n            'Usuarios', 'Publicaciones',\n        ],\n        search: '',\n        users: [],\n        city: '',\n        cities: [],\n        posts: [],\n        post: {\n            id: '',\n            index: ''\n        },\n        category: '',\n        categories: [],\n        comments: [],\n        new_comment: '',\n        msg_dialog: false,\n        comments_dialog: false,\n        likedColor: 'red',\n    }),\n    mounted() {\n        this.getCities(),\n        this.getCategories()\n    },\n    computed: {\n        ...mapState(['color_base'])\n    },\n    methods: {\n        debug() {\n            console.log('debug!')\n        },\n        async like(i) {\n            const response = await LikeService.like({post: i, user: this.$store.state.user._id})\n            this.searchPost(this.search, this.categories)\n            // console.log(response.data.result)\n        },\n        getCities () {\n            CityService.fetchCities().then(response => {\n                response.data.cities.forEach((city, index) => {\n                    this.cities.push(city.name)\n                })\n            })\n        },\n        getCategories () {\n            CategoryService.fetchCategories().then(response => {\n                response.data.categories.forEach((category, index) => {\n                    this.categories.push(category.name)\n                })\n            })\n        },\n        searchUser(input, cities) {\n            this.users = []\n            if(cities == ''){\n                UserService.searchUser({input}).then(response => {\n                    response.data.users.forEach((user, index) => {\n                        if(user._id != this.$store.state.user._id){\n                            this.users.push(user)\n                            FollowService.getFollower(user._id).then(r => {\n                                this.users[index].followed = r.data.followed\n                            })\n                        }\n                    })\n                })\n            }else{\n                cities.forEach(city=>{\n                    UserService.searchUserByCity({input, city}).then(response => {\n                        response.data.users.forEach((user, index) => {\n                            if(user._id != this.$store.state.user._id){\n                                this.users.push(user)\n                                FollowService.getFollower(user._id).then(r => {\n                                    this.users[index].followed = r.data.followed\n                                })\n                            }\n                        })\n                    })\n                })\n            }\n        },\n        searchPost(input, categories) {\n            this.posts = []\n            if(categories == ''){\n                PostService.searchPost({input}).then(response => {\n                    response.data.posts.forEach((post, index) => {\n                        this.posts.push(post)\n                        LikeService.getLikesByUser(post._id).then(r => {\n                            this.posts[index].liked = r.data.liked\n                        })\n                    })\n                })\n            }else{\n                categories.forEach(category=>{\n                    PostService.searchPostByCategory({input, category}).then(response => {\n                        response.data.posts.forEach((post, index) => {\n                            this.posts.push(post)\n                            LikeService.getLikesByUser(post._id).then(r => {\n                                this.posts[index].liked = r.data.liked\n                            })\n                        })\n                    })\n                })\n            }\n        },\n        buscar() {\n            if(this.tab == 0){\n                this.users = []\n                this.searchUser(this.search, this.city)\n            }else{\n                this.posts = []\n                this.searchPost(this.search, this.category)\n            }\n        },\n        showComments(index, id) {\n            this.comments = []\n            this.comments_dialog = true\n            this.post.index = index\n            this.post.id = id\n\n            CommentService.getComments(id).then(response => {\n                response.data.comments.forEach(comment => {\n                    this.comments.push(comment)\n                })\n            })\n        },\n        hideComments() {\n            this.comments = []\n        },\n        addComment(post, i) {\n            if (event.keyCode === 13) {\n                CommentService.addComment({\n                    post: post,\n                    user: this.$store.state.user._id,\n                    content: this.new_comment\n                })\n                this.comments.push({\n                    post: post,\n                    user: {\n                        username: this.$store.state.user.username,\n                        image: this.$store.state.user.image\n                    },\n                    content: this.new_comment\n                })\n                this.new_comment = ''\n            }\n        },\n        GoToProfile(username){\n            this.$router.push({ name: 'profile', params: { user: username } })\n        },\n        follow(id) {\n            FollowService.follow({followed: id, follower: this.$store.state.user._id}).then(response => {\n                // console.log(response.data.result)\n            })\n        }\n    },\n    // created() {\n    //     this.posts.forEach(element => {\n    //         element.liked ? element.color = this.likedColor : element.color = 'none'\n    //     });\n    // },\n}\n",{"version":3,"sources":["Search.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"Search.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-content>\n        <v-container grid-list-xs>\n            <v-layout row wrap>\n                <v-flex xs12>\n                    <v-text-field\n                        append-icon=\"search\"\n                        label=\"Buscar\"\n                        single-line\n                        hide-details\n                        :color=\"color_base\"\n                        v-model=\"search\"\n                        @keyup=\"buscar()\"\n                    ></v-text-field>\n                </v-flex>\n            </v-layout>\n            <v-tabs\n                v-model=\"tab\"\n                background-color=\"transparent\"\n                :color=\"color_base\"\n                grow\n                class=\"mb-1\"\n                >\n                <v-tab\n                    v-for=\"item in items\"\n                    :key=\"item\"\n                    v-text=\"item\"\n                >\n                </v-tab>\n            </v-tabs>\n\n            <v-tabs-items v-model=\"tab\">\n                <v-tab-item\n                    v-for=\"item in items\"\n                    :key=\"item\"\n                >\n                    <div v-if=\"item == 'Usuarios'\">\n                        <v-layout row wrap align-center>\n                            <v-flex x12>\n                                <v-select\n                                    v-model=\"city\"\n                                    :items=\"cities\"\n                                    attach\n                                    chips\n                                    label=\"Ciudades\"\n                                    multiple\n                                    :color=\"color_base\"\n                                ></v-select>\n                            </v-flex>\n                        </v-layout>\n                        <template v-for=\"(user, index) in users\">\n                            <v-list-item :key=\"index\" @click=\"GoToProfile(user.username)\">\n                                <v-list-item-icon>\n                                    <v-btn v-if=\"!user.followed\" x-small block class=\"font-weight-light\" @click=\"follow(user._id)\">\n                                        <v-icon dark left>done</v-icon>Seguir\n                                    </v-btn>\n\n                                    <v-btn v-else x-small block class=\"font-weight-light white--text\" :color=\"color_base\" @click=\"follow(user._id)\">\n                                        <v-icon dark left>done</v-icon>Seguido\n                                    </v-btn>\n                                </v-list-item-icon>\n\n                                <v-list-item-content>\n                                <v-list-item-title right>{{ user.firstname +\" \"+ user.lastname }}</v-list-item-title>\n                                <span class=\"grey--text caption\" v-text=\"user.username\"></span>\n                                </v-list-item-content>\n\n                                <v-list-item-avatar>\n                                <v-img :src=\"user.image\"></v-img>\n                                </v-list-item-avatar>\n                            </v-list-item>\n                            <v-divider inset :key=\"user._id\"></v-divider>\n                        </template>\n                    </div>\n\n                    <div v-if=\"item == 'Publicaciones'\">\n                        <v-layout row wrap align-center>\n                            <v-flex x12>\n                                <v-select\n                                    v-model=\"category\"\n                                    :items=\"categories\"\n                                    attach\n                                    chips\n                                    label=\"Categorias\"\n                                    multiple\n                                    :color=\"color_base\"\n                                ></v-select>\n                            </v-flex>\n                        </v-layout>\n                        <v-layout\n                            wrap\n                        >\n                            <v-flex\n                                v-for=\"(post, index) in posts\"\n                                :key=\"index\"\n                                v-bind=\"{ [`xs${post.xsflex}, md${post.mdflex}`]: true }\"\n                                >\n                                <v-card>\n                                    <v-img\n                                    :src=\"post.image\"\n                                    class=\"white--text\"\n                                    height=\"150px\"\n                                    gradient=\"to bottom, rgba(0,0,0,.1), rgba(0,0,0,.5)\"\n                                    >\n                                    <v-card-title\n                                        class=\"fill-height align-end\"\n                                        v-text=\"post.title\"\n                                    ></v-card-title>\n                                    </v-img>\n\n                                    <v-card-text>Precio: $\n                                        <span v-text=\"post.price\"></span>\n                                        <span class=\"float-right\"><v-chip\n                                            :color=\"color_base\"\n                                            label\n                                            small\n                                            v-text=\"post.category.name\"\n                                            text-color=\"white\"\n                                            >\n                                            <v-icon left>mdi-label</v-icon>\n                                            </v-chip></span><br>\n                                        <span class=\"text--primary\" v-text=\"post.description\"></span>\n                                    </v-card-text>\n\n                                    <v-card-actions>\n                                        <div class=\"grey--text ml-1 caption\">\n                                            {{ post.user.firstname +\" \"+ post.user.lastname +\", \"+ post.createdAt}}\n                                        </div>\n                                    <v-spacer></v-spacer>\n                                    \n\n                                    <v-btn icon :color=\"post.liked ? likedColor : 'none'\"\n                                    @click=\"like(post._id)\">\n                                        <v-icon>favorite</v-icon>\n                                    </v-btn>\n\n                                    <v-btn icon @click=\"showComments(index, post._id)\">\n                                        <v-icon>fa fa-comment</v-icon>\n                                    </v-btn>\n                                    \n                                    <v-btn icon @click=\"msg_dialog = true\">\n                                        <v-icon>fa fa-paper-plane</v-icon>\n                                    </v-btn>\n                                    </v-card-actions>\n                                </v-card>\n                                \n                                </v-flex>\n                        </v-layout>\n                    </div>\n                    \n                </v-tab-item>\n            </v-tabs-items>\n\n            <template id=\"msg-dialog\">\n                <v-layout justify-center>\n                    <v-dialog v-model=\"msg_dialog\" max-width=\"600px\">\n                    \n                    <v-card>\n                        <v-card-title>\n                        <span class=\"headline\">Mensaje directo</span>\n                        </v-card-title>\n                        <v-card-text>\n                        <v-container grid-list-md>\n                            <v-layout wrap>\n                            <v-flex xs12>\n                                <v-text-field :color=\"color_base\" label=\"Destinario*\" required></v-text-field>\n                            </v-flex>\n                            <v-flex xs12>\n                                <v-text-field :color=\"color_base\" label=\"Título del mensaje*\" required></v-text-field>\n                            </v-flex>\n                            <v-flex xs12>\n                                <v-textarea\n                                    outlined\n                                    name=\"mgs-body\"\n                                    label=\"Cuerpo del mensaje.\"\n                                    value=\"\"\n                                    :color=\"color_base\"\n                                ></v-textarea>\n                            </v-flex>\n\n                            </v-layout>\n                        </v-container>\n                        </v-card-text>\n                        <v-card-actions>\n                        <v-spacer></v-spacer>\n                        <v-btn :color=\"color_base\" text @click=\"msg_dialog = false\">Salir</v-btn>\n                        <v-btn :color=\"color_base\" text @click=\"msg_dialog = false\">Enviar</v-btn>\n                        </v-card-actions>\n                    </v-card>\n                    </v-dialog>\n                </v-layout>\n            </template>\n\n            <template id=\"comments-dialog\">\n                <v-layout justify-center>\n                    <v-dialog v-model=\"comments_dialog\" max-width=\"600px\" @click:outside=\"hideComments\">\n                    \n                    <v-card>\n                        <v-card-text>\n                        <v-container grid-list-md>\n                            <v-layout wrap>\n                                <v-list three-line>\n                                    <v-subheader>Comentarios</v-subheader>\n                                    <template v-for=\"(comment, c_index) in comments\">\n\n                                        <v-divider\n                                        :key=\"comment.title\"\n                                        inset\n                                        color=\"orange\"\n                                        ></v-divider>\n\n                                        <v-list-item\n                                        :key=\"c_index\"\n                                        >\n                                        \n                                        <v-list-item-avatar>\n                                            <v-img :src=\"comment.user.image\"></v-img>\n                                        </v-list-item-avatar>\n\n                                        <v-list-item-content>\n                                            <v-list-item-title v-html=\"comment.user.username\"></v-list-item-title>\n                                            <v-list-item-subtitle v-html=\"comment.content\"></v-list-item-subtitle>\n                                        </v-list-item-content>\n                                        </v-list-item>\n                                    </template>\n                                </v-list>\n\n                                <v-flex xs12>\n                                    <v-form>\n                                        <v-textarea\n                                        outlined\n                                        name=\"mgs-body\"\n                                        label=\"Escriba su comentario aquí\"\n                                        value=\"\"\n                                        v-model=\"new_comment\"\n                                        :color=\"color_base\"\n                                        auto-grow\n                                        hint=\"Pulsa enter para enviar\"\n                                        rows=\"1\"\n                                        @keyup=\"addComment(post.id, post.index)\"\n                                        ></v-textarea>\n                                    </v-form>\n                                </v-flex>\n\n                            </v-layout>\n                        </v-container>\n                        </v-card-text>\n                    </v-card>\n                    </v-dialog>\n                </v-layout>\n            </template>\n\n        </v-container>\n    </v-content>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport UserService from '@/services/UserService'\nimport PostService from '@/services/PostService'\nimport LikeService from '@/services/LikeService'\nimport CommentService from '@/services/CommentService'\nimport FollowService from '@/services/FollowService'\nimport CityService from '@/services/CityService'\nimport CategoryService from '@/services/CategoryService'\n\nexport default {\n    data: () => ({\n        tab: null,\n        items: [\n            'Usuarios', 'Publicaciones',\n        ],\n        search: '',\n        users: [],\n        city: '',\n        cities: [],\n        posts: [],\n        post: {\n            id: '',\n            index: ''\n        },\n        category: '',\n        categories: [],\n        comments: [],\n        new_comment: '',\n        msg_dialog: false,\n        comments_dialog: false,\n        likedColor: 'red',\n    }),\n    mounted() {\n        this.getCities(),\n        this.getCategories()\n    },\n    computed: {\n        ...mapState(['color_base'])\n    },\n    methods: {\n        debug() {\n            console.log('debug!')\n        },\n        async like(i) {\n            const response = await LikeService.like({post: i, user: this.$store.state.user._id})\n            this.searchPost(this.search, this.categories)\n            // console.log(response.data.result)\n        },\n        getCities () {\n            CityService.fetchCities().then(response => {\n                response.data.cities.forEach((city, index) => {\n                    this.cities.push(city.name)\n                })\n            })\n        },\n        getCategories () {\n            CategoryService.fetchCategories().then(response => {\n                response.data.categories.forEach((category, index) => {\n                    this.categories.push(category.name)\n                })\n            })\n        },\n        searchUser(input, cities) {\n            this.users = []\n            if(cities == ''){\n                UserService.searchUser({input}).then(response => {\n                    response.data.users.forEach((user, index) => {\n                        if(user._id != this.$store.state.user._id){\n                            this.users.push(user)\n                            FollowService.getFollower(user._id).then(r => {\n                                this.users[index].followed = r.data.followed\n                            })\n                        }\n                    })\n                })\n            }else{\n                cities.forEach(city=>{\n                    UserService.searchUserByCity({input, city}).then(response => {\n                        response.data.users.forEach((user, index) => {\n                            if(user._id != this.$store.state.user._id){\n                                this.users.push(user)\n                                FollowService.getFollower(user._id).then(r => {\n                                    this.users[index].followed = r.data.followed\n                                })\n                            }\n                        })\n                    })\n                })\n            }\n        },\n        searchPost(input, categories) {\n            this.posts = []\n            if(categories == ''){\n                PostService.searchPost({input}).then(response => {\n                    response.data.posts.forEach((post, index) => {\n                        this.posts.push(post)\n                        LikeService.getLikesByUser(post._id).then(r => {\n                            this.posts[index].liked = r.data.liked\n                        })\n                    })\n                })\n            }else{\n                categories.forEach(category=>{\n                    PostService.searchPostByCategory({input, category}).then(response => {\n                        response.data.posts.forEach((post, index) => {\n                            this.posts.push(post)\n                            LikeService.getLikesByUser(post._id).then(r => {\n                                this.posts[index].liked = r.data.liked\n                            })\n                        })\n                    })\n                })\n            }\n        },\n        buscar() {\n            if(this.tab == 0){\n                this.users = []\n                this.searchUser(this.search, this.city)\n            }else{\n                this.posts = []\n                this.searchPost(this.search, this.category)\n            }\n        },\n        showComments(index, id) {\n            this.comments = []\n            this.comments_dialog = true\n            this.post.index = index\n            this.post.id = id\n\n            CommentService.getComments(id).then(response => {\n                response.data.comments.forEach(comment => {\n                    this.comments.push(comment)\n                })\n            })\n        },\n        hideComments() {\n            this.comments = []\n        },\n        addComment(post, i) {\n            if (event.keyCode === 13) {\n                CommentService.addComment({\n                    post: post,\n                    user: this.$store.state.user._id,\n                    content: this.new_comment\n                })\n                this.comments.push({\n                    post: post,\n                    user: {\n                        username: this.$store.state.user.username,\n                        image: this.$store.state.user.image\n                    },\n                    content: this.new_comment\n                })\n                this.new_comment = ''\n            }\n        },\n        GoToProfile(username){\n            this.$router.push({ name: 'profile', params: { user: username } })\n        },\n        follow(id) {\n            FollowService.follow({followed: id, follower: this.$store.state.user._id}).then(response => {\n                // console.log(response.data.result)\n            })\n        }\n    },\n    // created() {\n    //     this.posts.forEach(element => {\n    //         element.liked ? element.color = this.likedColor : element.color = 'none'\n    //     });\n    // },\n}\n</script>"]}]}