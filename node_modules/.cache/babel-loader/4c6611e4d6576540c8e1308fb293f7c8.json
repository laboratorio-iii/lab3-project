{"remainingRequest":"/home/hermesgabriel/workspace/lab3-project/node_modules/babel-loader/lib/index.js!/home/hermesgabriel/workspace/lab3-project/src/services/PostService.js","dependencies":[{"path":"/home/hermesgabriel/workspace/lab3-project/src/services/PostService.js","mtime":1573908127751},{"path":"/home/hermesgabriel/workspace/lab3-project/node_modules/cache-loader/dist/cjs.js","mtime":1573791216187},{"path":"/home/hermesgabriel/workspace/lab3-project/node_modules/babel-loader/lib/index.js","mtime":1573791216119}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/hermesgabriel/workspace/lab3-project/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport api from '@/services/api';\nimport LikeService from '@/services/LikeService';\nexport default {\n  fetchPosts: function () {\n    var _fetchPosts = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var response, posts;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return api().get('post');\n\n            case 2:\n              response = _context2.sent;\n              posts = response.data.posts;\n              console.log(posts);\n              posts.forEach(\n              /*#__PURE__*/\n              function () {\n                var _ref = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee(element) {\n                  var likeResult;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return LikeService.getLike(element._id);\n\n                        case 2:\n                          likeResult = _context.sent;\n                          element.liked = likeResult.data.liked;\n                          element.xsflex = 12;\n                          element.mdflex = 6;\n                          element.liked ? element.color = 'red' : element.color = 'none';\n\n                        case 7:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n              return _context2.abrupt(\"return\", posts);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function fetchPosts() {\n      return _fetchPosts.apply(this, arguments);\n    }\n\n    return fetchPosts;\n  }(),\n  addPost: function addPost(params) {\n    return api().post('post', params);\n  },\n  getPost: function getPost(params) {\n    return api().get('post/' + params.id);\n  },\n  deletePost: function deletePost(id) {\n    return api().delete('post/' + id);\n  }\n};",{"version":3,"sources":["/home/hermesgabriel/workspace/lab3-project/src/services/PostService.js"],"names":["api","LikeService","fetchPosts","get","response","posts","data","console","log","forEach","element","getLike","_id","likeResult","liked","xsflex","mdflex","color","addPost","params","post","getPost","id","deletePost","delete"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,gBAAhB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,eAAe;AAEPC,EAAAA,UAFO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGYF,GAAG,GAAGG,GAAN,CAAU,MAAV,CAHZ;;AAAA;AAGLC,cAAAA,QAHK;AAILC,cAAAA,KAJK,GAIGD,QAAQ,CAACE,IAAT,CAAcD,KAJjB;AAKXE,cAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACAA,cAAAA,KAAK,CAACI,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAc,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACeT,WAAW,CAACU,OAAZ,CAAoBD,OAAO,CAACE,GAA5B,CADf;;AAAA;AACJC,0BAAAA,UADI;AAEVH,0BAAAA,OAAO,CAACI,KAAR,GAAgBD,UAAU,CAACP,IAAX,CAAgBQ,KAAhC;AACAJ,0BAAAA,OAAO,CAACK,MAAR,GAAiB,EAAjB;AACAL,0BAAAA,OAAO,CAACM,MAAR,GAAiB,CAAjB;AACAN,0BAAAA,OAAO,CAACI,KAAR,GAAgBJ,OAAO,CAACO,KAAR,GAAgB,KAAhC,GAAwCP,OAAO,CAACO,KAAR,GAAgB,MAAxD;;AALU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAd;;AAAA;AAAA;AAAA;AAAA;AANW,gDAaJZ,KAbI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgBba,EAAAA,OAhBa,mBAgBJC,MAhBI,EAgBI;AACf,WAAOnB,GAAG,GAAGoB,IAAN,CAAW,MAAX,EAAmBD,MAAnB,CAAP;AACD,GAlBY;AAoBbE,EAAAA,OApBa,mBAoBJF,MApBI,EAoBI;AACf,WAAOnB,GAAG,GAAGG,GAAN,CAAU,UAAUgB,MAAM,CAACG,EAA3B,CAAP;AACD,GAtBY;AAwBbC,EAAAA,UAxBa,sBAwBDD,EAxBC,EAwBG;AACd,WAAOtB,GAAG,GAAGwB,MAAN,CAAa,UAAUF,EAAvB,CAAP;AACD;AA1BY,CAAf","sourcesContent":["import api from '@/services/api'\nimport LikeService from '@/services/LikeService'\n\nexport default {\n\n  async fetchPosts () {\n    const response = await api().get('post')\n    const posts = response.data.posts\n    console.log(posts)\n    posts.forEach(async element => {\n        const likeResult = await LikeService.getLike(element._id)\n        element.liked = likeResult.data.liked\n        element.xsflex = 12\n        element.mdflex = 6\n        element.liked ? element.color = 'red' : element.color = 'none'\n    });\n    return posts\n  },\n\n  addPost (params) {\n    return api().post('post', params)\n  },\n\n  getPost (params) {\n    return api().get('post/' + params.id)\n  },\n\n  deletePost (id) {\n    return api().delete('post/' + id)\n  }\n}\n"]}]}